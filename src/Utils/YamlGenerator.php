<?php

declare(strict_types=1);

namespace Yangweijie\ThinkScramble\Utils;

/**
 * 简单的 YAML 生成器
 * 
 * 用于在没有 YAML 扩展的情况下生成 YAML 格式的文档
 */
class YamlGenerator
{
    /**
     * 将数组转换为 YAML 字符串
     *
     * @param array $data 要转换的数据
     * @param int $indent 缩进级别
     * @return string
     */
    public static function encode(array $data, int $indent = 0): string
    {
        $yaml = '';
        $indentStr = str_repeat('  ', $indent);

        foreach ($data as $key => $value) {
            if (is_array($value)) {
                if (self::isSequentialArray($value)) {
                    // 处理数组
                    $yaml .= $indentStr . $key . ":\n";
                    foreach ($value as $item) {
                        if (is_array($item)) {
                            $yaml .= $indentStr . "  -\n";
                            $yaml .= self::encode($item, $indent + 2);
                        } else {
                            $yaml .= $indentStr . '  - ' . self::formatValue($item) . "\n";
                        }
                    }
                } else {
                    // 处理对象
                    $yaml .= $indentStr . $key . ":\n";
                    $yaml .= self::encode($value, $indent + 1);
                }
            } else {
                // 处理标量值
                $yaml .= $indentStr . $key . ': ' . self::formatValue($value) . "\n";
            }
        }

        return $yaml;
    }

    /**
     * 检查数组是否为顺序数组
     *
     * @param array $array
     * @return bool
     */
    private static function isSequentialArray(array $array): bool
    {
        if (empty($array)) {
            return true;
        }

        return array_keys($array) === range(0, count($array) - 1);
    }

    /**
     * 格式化值
     *
     * @param mixed $value
     * @return string
     */
    private static function formatValue($value): string
    {
        if ($value === null) {
            return 'null';
        }

        if (is_bool($value)) {
            return $value ? 'true' : 'false';
        }

        if (is_numeric($value)) {
            return (string) $value;
        }

        if (is_string($value)) {
            // 检查是否需要引号
            if (self::needsQuotes($value)) {
                return '"' . self::escapeString($value) . '"';
            }
            return $value;
        }

        return (string) $value;
    }

    /**
     * 检查字符串是否需要引号
     *
     * @param string $value
     * @return bool
     */
    private static function needsQuotes(string $value): bool
    {
        // 如果包含特殊字符或以特殊字符开头，需要引号
        if (preg_match('/[:\[\]{}|>*&!%#`@,]/', $value)) {
            return true;
        }

        // 如果是 YAML 关键字，需要引号
        $yamlKeywords = ['true', 'false', 'null', 'yes', 'no', 'on', 'off'];
        if (in_array(strtolower($value), $yamlKeywords)) {
            return true;
        }

        // 如果看起来像数字但实际是字符串，需要引号
        if (is_numeric($value) && !is_int($value) && !is_float($value)) {
            return true;
        }

        // 如果包含换行符，需要引号
        if (strpos($value, "\n") !== false) {
            return true;
        }

        return false;
    }

    /**
     * 转义字符串
     *
     * @param string $value
     * @return string
     */
    private static function escapeString(string $value): string
    {
        return str_replace(
            ['"', '\\', "\n", "\r", "\t"],
            ['\\"', '\\\\', '\\n', '\\r', '\\t'],
            $value
        );
    }

    /**
     * 生成 OpenAPI YAML 文档
     *
     * @param array $document OpenAPI 文档数组
     * @return string
     */
    public static function generateOpenApiYaml(array $document): string
    {
        $yaml = "# OpenAPI 3.0 Specification\n";
        $yaml .= "# Generated by ThinkScramble\n";
        $yaml .= "# " . date('Y-m-d H:i:s') . "\n\n";
        
        $yaml .= self::encode($document);
        
        return $yaml;
    }

    /**
     * 检查是否可以使用原生 YAML 扩展
     *
     * @return bool
     */
    public static function hasNativeYamlSupport(): bool
    {
        return function_exists('yaml_emit');
    }

    /**
     * 使用最佳可用方法生成 YAML
     *
     * @param array $data
     * @return string
     */
    public static function dump(array $data): string
    {
        if (self::hasNativeYamlSupport()) {
            $result = yaml_emit($data);
            if ($result !== false) {
                return $result;
            }
        }

        // 回退到我们的简单生成器
        return self::generateOpenApiYaml($data);
    }
}
