<?php

declare(strict_types=1);

namespace Tests;

use PHPUnit\Framework\TestCase;
use Yangweijie\ThinkScramble\Utils\YamlGenerator;

/**
 * YAML 生成器测试类
 */
class YamlGeneratorTest extends TestCase
{
    public function testBasicYamlGeneration(): void
    {
        $data = [
            'name' => 'Test API',
            'version' => '1.0.0',
            'description' => 'A test API'
        ];

        $yaml = YamlGenerator::encode($data);
        
        $this->assertStringContainsString('name: Test API', $yaml);
        $this->assertStringContainsString('version: 1.0.0', $yaml);
        $this->assertStringContainsString('description: A test API', $yaml);
    }

    public function testArrayHandling(): void
    {
        $data = [
            'tags' => ['user', 'admin', 'api'],
            'servers' => [
                ['url' => 'https://api.example.com', 'description' => 'Production'],
                ['url' => 'https://staging.example.com', 'description' => 'Staging']
            ]
        ];

        $yaml = YamlGenerator::encode($data);
        
        $this->assertStringContainsString('tags:', $yaml);
        $this->assertStringContainsString('  - user', $yaml);
        $this->assertStringContainsString('  - admin', $yaml);
        $this->assertStringContainsString('  - api', $yaml);
        
        $this->assertStringContainsString('servers:', $yaml);
        $this->assertStringContainsString('url: https://api.example.com', $yaml);
        $this->assertStringContainsString('description: Production', $yaml);
    }

    public function testSpecialValues(): void
    {
        $data = [
            'null_value' => null,
            'true_value' => true,
            'false_value' => false,
            'number_value' => 42,
            'float_value' => 3.14
        ];

        $yaml = YamlGenerator::encode($data);
        
        $this->assertStringContainsString('null_value: null', $yaml);
        $this->assertStringContainsString('true_value: true', $yaml);
        $this->assertStringContainsString('false_value: false', $yaml);
        $this->assertStringContainsString('number_value: 42', $yaml);
        $this->assertStringContainsString('float_value: 3.14', $yaml);
    }

    public function testStringQuoting(): void
    {
        $data = [
            'simple_string' => 'hello',
            'string_with_colon' => 'key: value',
            'string_with_quotes' => 'He said "hello"',
            'yaml_keyword' => 'true',
            'numeric_string' => '123'
        ];

        $yaml = YamlGenerator::encode($data);
        
        $this->assertStringContainsString('simple_string: hello', $yaml);
        $this->assertStringContainsString('string_with_colon: "key: value"', $yaml);
        $this->assertStringContainsString('string_with_quotes: "He said \\"hello\\""', $yaml);
        $this->assertStringContainsString('yaml_keyword: "true"', $yaml);
    }

    public function testOpenApiDocument(): void
    {
        $document = [
            'openapi' => '3.0.0',
            'info' => [
                'title' => 'Test API',
                'version' => '1.0.0',
                'description' => 'A test API for YAML generation'
            ],
            'paths' => [
                '/users' => [
                    'get' => [
                        'summary' => 'Get users',
                        'responses' => [
                            '200' => [
                                'description' => 'Success'
                            ]
                        ]
                    ]
                ]
            ]
        ];

        $yaml = YamlGenerator::generateOpenApiYaml($document);
        
        $this->assertStringContainsString('# OpenAPI 3.0 Specification', $yaml);
        $this->assertStringContainsString('# Generated by ThinkScramble', $yaml);
        $this->assertStringContainsString('openapi: 3.0.0', $yaml);
        $this->assertStringContainsString('title: Test API', $yaml);
        $this->assertStringContainsString('paths:', $yaml);
        $this->assertStringContainsString('/users:', $yaml);
        $this->assertStringContainsString('get:', $yaml);
        $this->assertStringContainsString('summary: Get users', $yaml);
    }

    public function testDumpMethod(): void
    {
        $data = [
            'test' => 'value',
            'number' => 42
        ];

        $yaml = YamlGenerator::dump($data);
        
        $this->assertIsString($yaml);
        $this->assertStringContainsString('test: value', $yaml);
        $this->assertStringContainsString('number: 42', $yaml);
    }

    public function testHasNativeYamlSupport(): void
    {
        $hasSupport = YamlGenerator::hasNativeYamlSupport();
        
        // 这个测试的结果取决于环境是否安装了 YAML 扩展
        $this->assertIsBool($hasSupport);
    }

    public function testComplexNestedStructure(): void
    {
        $data = [
            'components' => [
                'schemas' => [
                    'User' => [
                        'type' => 'object',
                        'properties' => [
                            'id' => [
                                'type' => 'integer',
                                'format' => 'int64'
                            ],
                            'name' => [
                                'type' => 'string',
                                'maxLength' => 100
                            ],
                            'tags' => [
                                'type' => 'array',
                                'items' => [
                                    'type' => 'string'
                                ]
                            ]
                        ],
                        'required' => ['id', 'name']
                    ]
                ]
            ]
        ];

        $yaml = YamlGenerator::encode($data);
        
        $this->assertStringContainsString('components:', $yaml);
        $this->assertStringContainsString('schemas:', $yaml);
        $this->assertStringContainsString('User:', $yaml);
        $this->assertStringContainsString('type: object', $yaml);
        $this->assertStringContainsString('properties:', $yaml);
        $this->assertStringContainsString('id:', $yaml);
        $this->assertStringContainsString('type: integer', $yaml);
        $this->assertStringContainsString('format: int64', $yaml);
        $this->assertStringContainsString('required:', $yaml);
        $this->assertStringContainsString('  - id', $yaml);
        $this->assertStringContainsString('  - name', $yaml);
    }

    public function testEmptyArrays(): void
    {
        $data = [
            'empty_array' => [],
            'empty_object' => new \stdClass()
        ];

        $yaml = YamlGenerator::encode($data);
        
        $this->assertStringContainsString('empty_array:', $yaml);
        // 空数组应该正确处理
        $this->assertIsString($yaml);
    }
}
