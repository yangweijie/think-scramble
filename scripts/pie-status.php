<?php

/**
 * PIE Áä∂ÊÄÅÊ£ÄÊü•ËÑöÊú¨
 */

declare(strict_types=1);

echo "üìä ThinkScramble Installation Status\n";
echo "====================================\n\n";

// Ê£ÄÊü•Êìç‰ΩúÁ≥ªÁªü
$os = PHP_OS_FAMILY;
echo "üñ•Ô∏è Operating System: {$os}\n";
echo "üêò PHP Version: " . PHP_VERSION . "\n\n";

// Ê£ÄÊü•ÂÆâË£ÖË∑ØÂæÑ
$installPaths = [
    'Linux' => '/usr/local/bin',
    'Darwin' => '/usr/local/bin',
    'Windows' => getenv('USERPROFILE') . '\\bin',
];

$installPath = $installPaths[$os] ?? '/usr/local/bin';
$binaryName = $os === 'Windows' ? 'scramble.bat' : 'scramble';
$targetFile = $installPath . DIRECTORY_SEPARATOR . $binaryName;

echo "üìÅ Expected install path: {$installPath}\n";
echo "üìÑ Binary name: {$binaryName}\n\n";

// Ê£ÄÊü•‰∏ªË¶ÅÂÆâË£Ö
$isInstalled = false;
$installedPath = null;

if (file_exists($targetFile)) {
    $isInstalled = true;
    $installedPath = $targetFile;
    echo "‚úÖ ThinkScramble is installed: {$targetFile}\n";
} else {
    echo "‚ùå ThinkScramble not found in expected location\n";
    
    // ÊêúÁ¥¢ÂÖ∂‰ªñÂèØËÉΩÁöÑ‰ΩçÁΩÆ
    $searchPaths = [
        '/usr/bin/scramble',
        '/usr/local/bin/scramble',
        getenv('HOME') . '/.local/bin/scramble',
        '/opt/homebrew/bin/scramble',
    ];
    
    echo "üîç Searching in other locations...\n";
    foreach ($searchPaths as $path) {
        if (file_exists($path)) {
            $isInstalled = true;
            $installedPath = $path;
            echo "‚úÖ Found installation: {$path}\n";
            break;
        }
    }
    
    if (!$isInstalled) {
        echo "‚ùå ThinkScramble not found in any common locations\n";
    }
}

echo "\n";

// Â¶ÇÊûúÊâæÂà∞ÂÆâË£ÖÔºåËé∑ÂèñËØ¶ÁªÜ‰ø°ÊÅØ
if ($isInstalled && $installedPath) {
    echo "üìã Installation Details:\n";
    echo "   Path: {$installedPath}\n";
    echo "   Size: " . formatBytes(filesize($installedPath)) . "\n";
    echo "   Modified: " . date('Y-m-d H:i:s', filemtime($installedPath)) . "\n";
    echo "   Permissions: " . substr(sprintf('%o', fileperms($installedPath)), -4) . "\n";
    
    // Ê£ÄÊü•ÊòØÂê¶ÂèØÊâßË°å
    if (is_executable($installedPath)) {
        echo "   Executable: ‚úÖ Yes\n";
    } else {
        echo "   Executable: ‚ùå No\n";
    }
    
    echo "\n";
    
    // Ëé∑ÂèñÁâàÊú¨‰ø°ÊÅØ
    echo "üè∑Ô∏è Version Information:\n";
    $output = [];
    $returnCode = 0;
    exec("{$installedPath} --version 2>/dev/null", $output, $returnCode);
    
    if ($returnCode === 0) {
        foreach ($output as $line) {
            echo "   {$line}\n";
        }
    } else {
        echo "   ‚ùå Failed to get version information\n";
    }
    
    echo "\n";
    
    // ÊµãËØïÂü∫Êú¨ÂäüËÉΩ
    echo "üß™ Functionality Test:\n";
    $output = [];
    $returnCode = 0;
    exec("{$installedPath} --help 2>/dev/null", $output, $returnCode);
    
    if ($returnCode === 0) {
        echo "   ‚úÖ Help command works\n";
    } else {
        echo "   ‚ùå Help command failed\n";
    }
    
    // Ê£ÄÊü•‰æùËµñÊñá‰ª∂ (Windows)
    if ($os === 'Windows') {
        $pharFile = dirname($installedPath) . DIRECTORY_SEPARATOR . 'scramble.phar';
        if (file_exists($pharFile)) {
            echo "   ‚úÖ PHAR file found: {$pharFile}\n";
            echo "   PHAR size: " . formatBytes(filesize($pharFile)) . "\n";
        } else {
            echo "   ‚ö†Ô∏è PHAR file not found: {$pharFile}\n";
        }
    }
}

echo "\n";

// Ê£ÄÊü•ÁºìÂ≠òÁõÆÂΩï
echo "üíæ Cache Information:\n";
$cacheDir = sys_get_temp_dir() . '/think-scramble-cache';

if (is_dir($cacheDir)) {
    echo "   Cache directory: {$cacheDir}\n";
    
    $files = glob($cacheDir . '/*');
    $totalSize = 0;
    
    foreach ($files as $file) {
        if (is_file($file)) {
            $totalSize += filesize($file);
        }
    }
    
    echo "   Cache files: " . count($files) . "\n";
    echo "   Cache size: " . formatBytes($totalSize) . "\n";
    echo "   Last modified: " . (count($files) > 0 ? date('Y-m-d H:i:s', max(array_map('filemtime', $files))) : 'N/A') . "\n";
} else {
    echo "   ‚ùå Cache directory not found\n";
}

echo "\n";

// Ê£ÄÊü• PATH ÁéØÂ¢ÉÂèòÈáè
echo "üõ§Ô∏è PATH Information:\n";
$pathEnv = getenv('PATH');
$pathDirs = explode(PATH_SEPARATOR, $pathEnv);

$inPath = false;
foreach ($pathDirs as $dir) {
    if (realpath($dir) === realpath($installPath)) {
        $inPath = true;
        break;
    }
}

if ($inPath) {
    echo "   ‚úÖ Install directory is in PATH\n";
} else {
    echo "   ‚ö†Ô∏è Install directory not in PATH\n";
    echo "   üí° Add {$installPath} to your PATH for global access\n";
}

echo "\n";

// Á≥ªÁªüË¶ÅÊ±ÇÊ£ÄÊü•
echo "‚öôÔ∏è System Requirements:\n";

// PHP ÁâàÊú¨
if (version_compare(PHP_VERSION, '8.0.0', '>=')) {
    echo "   ‚úÖ PHP version: " . PHP_VERSION . " (>= 8.0.0)\n";
} else {
    echo "   ‚ùå PHP version: " . PHP_VERSION . " (< 8.0.0 required)\n";
}

// ÂøÖÈúÄÊâ©Â±ï
$requiredExtensions = ['json', 'mbstring'];
foreach ($requiredExtensions as $ext) {
    if (extension_loaded($ext)) {
        echo "   ‚úÖ Extension {$ext}: loaded\n";
    } else {
        echo "   ‚ùå Extension {$ext}: not loaded\n";
    }
}

// ÂèØÈÄâÊâ©Â±ï
$optionalExtensions = ['yaml', 'zip'];
foreach ($optionalExtensions as $ext) {
    if (extension_loaded($ext)) {
        echo "   ‚úÖ Extension {$ext}: loaded (optional)\n";
    } else {
        echo "   ‚ö†Ô∏è Extension {$ext}: not loaded (optional)\n";
    }
}

echo "\n";

// ÊÄªÁªì
echo "üìù Summary:\n";
if ($isInstalled) {
    echo "   Status: ‚úÖ Installed and functional\n";
    echo "   Location: {$installedPath}\n";
    echo "   Ready to use: " . ($inPath ? "‚úÖ Yes" : "‚ö†Ô∏è Add to PATH") . "\n";
} else {
    echo "   Status: ‚ùå Not installed\n";
    echo "   Action: Install with 'pie install yangweijie/think-scramble'\n";
}

echo "\n";
echo "üìö Documentation: https://github.com/yangweijie/think-scramble\n";
echo "üêõ Issues: https://github.com/yangweijie/think-scramble/issues\n";

/**
 * Ê†ºÂºèÂåñÂ≠óËäÇÊï∞
 */
function formatBytes(int $bytes, int $precision = 2): string
{
    $units = ['B', 'KB', 'MB', 'GB'];
    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);
    
    $bytes /= (1 << (10 * $pow));
    
    return round($bytes, $precision) . ' ' . $units[$pow];
}
