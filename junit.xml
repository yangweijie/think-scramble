<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="D:\git\php\think-scramble\phpunit.xml" tests="28" assertions="85" errors="0" failures="0" skipped="0" time="0.026935">
    <testsuite name="Unit" tests="28" assertions="85" errors="0" failures="0" skipped="0" time="0.026935">
      <testsuite name="Tests\Unit\CacheTest" file="tests\Unit\CacheTest.php" tests="13" assertions="49" errors="0" failures="0" skipped="0" time="0.014882">
        <testcase name="`CacheManager` → it can perform basic cache operations" file="tests\Unit\CacheTest.php::`CacheManager` → it can perform basic cache operations" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="3" time="0.006498"/>
        <testcase name="`CacheManager` → it can cache complex data" file="tests\Unit\CacheTest.php::`CacheManager` → it can cache complex data" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="2" time="0.000542"/>
        <testcase name="`CacheManager` → it can use remember method" file="tests\Unit\CacheTest.php::`CacheManager` → it can use remember method" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="2" time="0.000657"/>
        <testcase name="`CacheManager` → it provides cache statistics" file="tests\Unit\CacheTest.php::`CacheManager` → it provides cache statistics" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="12" time="0.001275"/>
        <testcase name="`CacheManager` → it can flush cache" file="tests\Unit\CacheTest.php::`CacheManager` → it can flush cache" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="1" time="0.000458"/>
        <testcase name="`CacheManager` → it can warmup cache" file="tests\Unit\CacheTest.php::`CacheManager` → it can warmup cache" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="5" time="0.000618"/>
        <testcase name="`CacheManager` → it generates consistent cache keys" file="tests\Unit\CacheTest.php::`CacheManager` → it generates consistent cache keys" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="2" time="0.001473"/>
        <testcase name="`CacheManager` → it can serialize and unserialize values" file="tests\Unit\CacheTest.php::`CacheManager` → it can serialize and unserialize values" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="2" time="0.000432"/>
        <testcase name="`CacheManager` → it handles version compatibility" file="tests\Unit\CacheTest.php::`CacheManager` → it handles version compatibility" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="1" time="0.000480"/>
        <testcase name="`CacheManager` → it has good performance" file="tests\Unit\CacheTest.php::`CacheManager` → it has good performance" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="4" time="0.001083"/>
        <testcase name="`CacheManager` → it handles errors gracefully" file="tests\Unit\CacheTest.php::`CacheManager` → it handles errors gracefully" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="3" time="0.000432"/>
        <testcase name="`CacheManager` → it can reset statistics" file="tests\Unit\CacheTest.php::`CacheManager` → it can reset statistics" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="5" time="0.000454"/>
        <testcase name="`CacheManager` → it provides size information" file="tests\Unit\CacheTest.php::`CacheManager` → it provides size information" class="Tests\Unit\CacheTest" classname="Tests.Unit.CacheTest" assertions="7" time="0.000479"/>
      </testsuite>
      <testsuite name="Tests\Unit\ConfigTest" file="tests\Unit\ConfigTest.php" tests="15" assertions="36" errors="0" failures="0" skipped="0" time="0.012053">
        <testcase name="`ScrambleConfig` → it has default configuration values" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it has default configuration values" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="4" time="0.003138"/>
        <testcase name="`ScrambleConfig` → it can set and get configuration values" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can set and get configuration values" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="1" time="0.000455"/>
        <testcase name="`ScrambleConfig` → it can handle nested configuration" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can handle nested configuration" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="1" time="0.000442"/>
        <testcase name="`ScrambleConfig` → it can merge custom configuration" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can merge custom configuration" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="4" time="0.000595"/>
        <testcase name="`ScrambleConfig` → it can check if configuration exists" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can check if configuration exists" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="3" time="0.000531"/>
        <testcase name="`ScrambleConfig` → it returns default value for non-existent keys" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it returns default value for non-existent keys" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="3" time="0.000504"/>
        <testcase name="`ScrambleConfig` → it can get all configuration" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can get all configuration" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="3" time="0.000566"/>
        <testcase name="`ScrambleConfig` → it can validate configuration" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can validate configuration" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="2" time="0.000656"/>
        <testcase name="`ScrambleConfig` → it can handle environment specific config" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can handle environment specific config" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="2" time="0.000488"/>
        <testcase name="`ScrambleConfig` → it can serialize configuration" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can serialize configuration" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="2" time="0.000552"/>
        <testcase name="`ScrambleConfig` → it can create configuration from array" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can create configuration from array" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="3" time="0.000609"/>
        <testcase name="`ScrambleConfig` → it can clone configuration" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can clone configuration" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="2" time="0.000451"/>
        <testcase name="`ScrambleConfig` → it can reset configuration" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it can reset configuration" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="3" time="0.000573"/>
        <testcase name="`ScrambleConfig` → it has good performance for configuration operations" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it has good performance for configuration operations" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="2" time="0.001493"/>
        <testcase name="`ScrambleConfig` → it uses memory efficiently" file="tests\Unit\ConfigTest.php::`ScrambleConfig` → it uses memory efficiently" class="Tests\Unit\ConfigTest" classname="Tests.Unit.ConfigTest" assertions="1" time="0.001003"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
